// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "jetdev-task/shared/config"
import mock "github.com/stretchr/testify/mock"

// IConfig is an autogenerated mock type for the IConfig type
type IConfig struct {
	mock.Mock
}

// App provides a mock function with given fields:
func (_m *IConfig) App() *config.App {
	ret := _m.Called()

	var r0 *config.App
	if rf, ok := ret.Get(0).(func() *config.App); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.App)
		}
	}

	return r0
}

// AppRegion provides a mock function with given fields:
func (_m *IConfig) AppRegion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AppVersion provides a mock function with given fields:
func (_m *IConfig) AppVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Database provides a mock function with given fields:
func (_m *IConfig) Database() *config.Database {
	ret := _m.Called()

	var r0 *config.Database
	if rf, ok := ret.Get(0).(func() *config.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Database)
		}
	}

	return r0
}

// Env provides a mock function with given fields:
func (_m *IConfig) Env() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *IConfig) Info() *config.Log {
	ret := _m.Called()

	var r0 *config.Log
	if rf, ok := ret.Get(0).(func() *config.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Log)
		}
	}

	return r0
}

// WorkDir provides a mock function with given fields:
func (_m *IConfig) WorkDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
