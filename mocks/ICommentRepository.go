// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import database "jetdev-task/shared/database"
import mock "github.com/stretchr/testify/mock"
import model "jetdev-task/model"
import uuid "github.com/satori/go.uuid"

// ICommentRepository is an autogenerated mock type for the ICommentRepository type
type ICommentRepository struct {
	mock.Mock
}

// GetCommentById provides a mock function with given fields: conn, commentId
func (_m *ICommentRepository) GetCommentById(conn database.IConnection, commentId uuid.UUID) (model.Comment, error) {
	ret := _m.Called(conn, commentId)

	var r0 model.Comment
	if rf, ok := ret.Get(0).(func(database.IConnection, uuid.UUID) model.Comment); ok {
		r0 = rf(conn, commentId)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.IConnection, uuid.UUID) error); ok {
		r1 = rf(conn, commentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCommentOnArticle provides a mock function with given fields: conn, req
func (_m *ICommentRepository) PostCommentOnArticle(conn database.IConnection, req model.Comment) (model.Comment, error) {
	ret := _m.Called(conn, req)

	var r0 model.Comment
	if rf, ok := ret.Get(0).(func(database.IConnection, model.Comment) model.Comment); ok {
		r0 = rf(conn, req)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.IConnection, model.Comment) error); ok {
		r1 = rf(conn, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
